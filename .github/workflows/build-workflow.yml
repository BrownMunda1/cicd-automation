name: build-workflow
run-name: Build Workflow

on:
  push:

permissions:
    contents: read

jobs:
    build:
        name: "Python Build"
        runs-on: ubuntu-latest

        steps:
        -   id: checkout
            name: Checkout
            uses: actions/checkout@v5
            with:
                fetch-depth: 0

        -   id: setup-python
            name: Set up Python 3.12
            uses: actions/setup-python@v5
            with:
                python-version: "3.12.x"

        -   id: display-version
            name: Display Python version
            run: python -c "import sys; print(sys.version)"

        -   id: setup-uv
            uses: astral-sh/setup-uv@v6
            with:
                version: "latest"

        -   id: display-uv-version
            name: Display uv version
            run: uv --version

        -   id: uv-build
            name: UV virtual environment, build and install
            run: |
                echo "Running uv sync for installing all packages in virutal environment from pyproject.toml file"
                uv sync

                echo "Falling back to requirements.txt if not present in pyproject.toml"
                uv add -r requirements.txt

                echo "Running uv build for creating whl files"
                uv build

        -   id: get-changed-repos
            name: Get Changed Repositories
            run: |
                temp=$(git diff "${{ github.event.before }}" "${{ github.sha }}")
                echo "Github Difference from last commit = $temp"
                repos_changed=()
                for FILE in $temp; do
                    if [[ "$FILE" == src/* ]]; then
                        IFS='/'; arrIN=($FILE); unset IFS;
                        repos_changed+=( ${arrIN[1]} )
                    fi
                done

                echo "REPOS_CHANGED=$repos_changed" >> $GITHUB_OUTPUT

        -   id: build-individual-projects
            name: Build Projects
            run: |
                for REPO in ${{ steps.get-changed-repos.outputs.REPOS_CHANGED }}; do
                    cd src/$REPO
                    uv sync
                    if [ -e requirements.txt ]; then
                        uv add -r requirements.txt
                    fi
                    uv build
                    temp=$(python -m main I am Ankit)
                    echo "Python Script Answer: $temp"
                    cd ..
                    echo "$REPO Built successfully"
                done
