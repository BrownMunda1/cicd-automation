name: build-workflow
run-name: Build Workflow

on:
  push:

permissions:
    contents: read

jobs:
    build:
        name: "Python Build"
        runs-on: ubuntu-latest

        steps:
        -   id: checkout
            name: Checkout
            uses: actions/checkout@v5
            with:
                fetch-depth: 0

        -   id: setup-python
            name: Set up Python 3.12
            uses: actions/setup-python@v5
            with:
                python-version: "3.12.x"

        -   id: display-version
            name: Display Python version
            run: python -c "import sys; print(sys.version)"

        -   id: setup-uv
            uses: astral-sh/setup-uv@v6
            with:
                version: "latest"

        -   id: display-uv-version
            name: Display uv version
            run: uv --version

        -   id: uv-build
            name: UV virtual environment, build and install
            run: |
                echo "Running uv sync for installing all packages in virutal environment from pyproject.toml file"
                uv sync

                echo "Falling back to requirements.txt if not present in pyproject.toml"
                if [ -e requirements.txt ]; then
                    uv add -r requirements.txt
                fi

                echo "Running uv build for creating whl files"
                uv build

        -   id: get-last-successful-workflow-run
            name: Get last Successful Workflow Run
            uses: actions/github-script@v8
            with:
                script: |
                    const { owner, repo } = context.repo;
                    const runs = await github.rest.actions.listWorkflowRunsForRepo({
                        owner,
                        repo,
                        per_page: 100
                    })
                    
                    const workflowRuns = runs.data.workflow_runs;
                    workflowRuns.sort((a,b) => {
                        const timea = a.head_commit.timestamp;
                        const timeb = b.head_commit.timestamp;
                        return timeb-timea;
                    });
                    return workflowRuns;
                    # const lastSuccessfulWorkflow = workflowRuns.find(workflow => workflow.status === "success")
                    # return lastSuccessfulWorkflow.head_sha

        -   id: checker-of-last-successful-workflow-trigger
            name: Check of last successful workflow trigger
            run: |
                echo "python -m src.main ${{ steps.get-last-successful-workflow-run.outputs.result }}" 

        -   id: get-changed-repos
            name: Get Changed Repositories
            run: |
                temp=$(git diff "${{ github.event.before }}" "${{ github.sha }}")
                echo "Github Difference from last commit = $temp"
                result=$(python -m src.main "$temp")
                echo "GIT DIFF: $result"
                # First find the last successful workflow. Get the git diff of it with the current commit. Pass the diff to python script, which uses langchain or anything to process it and give back the repositories to run the builds for, and pass it to the next step
                repos_changed=()
                for FILE in $temp; do
                    if [[ "$FILE" == src/* ]]; then
                        IFS='/'; arrIN=($FILE); unset IFS;
                        repos_changed+=( ${arrIN[1]} )
                    fi
                done

                echo "REPOS_CHANGED=$repos_changed" >> $GITHUB_OUTPUT

        -   id: build-individual-projects
            name: Build Projects
            run: |
                for REPO in ${{ steps.get-changed-repos.outputs.REPOS_CHANGED }}; do
                    cd src/$REPO
                    uv sync
                    if [ -e requirements.txt ]; then
                        uv add -r requirements.txt
                    fi
                    uv build
                    temp=$(python -m main I am Ankit)
                    echo "Python Script Answer: $temp"
                    cd ..
                    echo "$REPO Built successfully"
                done
